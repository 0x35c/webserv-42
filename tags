!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!CSS	c,class	/classes/
!_TAG_KIND_DESCRIPTION!CSS	i,id	/identities/
!_TAG_KIND_DESCRIPTION!CSS	s,selector	/selectors/
!_TAG_KIND_DESCRIPTION!HTML	C,stylesheet	/stylesheets/
!_TAG_KIND_DESCRIPTION!HTML	I,id	/identifiers/
!_TAG_KIND_DESCRIPTION!HTML	J,script	/scripts/
!_TAG_KIND_DESCRIPTION!HTML	a,anchor	/named anchors/
!_TAG_KIND_DESCRIPTION!HTML	c,class	/classes/
!_TAG_KIND_DESCRIPTION!HTML	h,heading1	/H1 headings/
!_TAG_KIND_DESCRIPTION!HTML	i,heading2	/H2 headings/
!_TAG_KIND_DESCRIPTION!HTML	j,heading3	/H3 headings/
!_TAG_KIND_DESCRIPTION!HTML	t,title	/titles/
!_TAG_KIND_DESCRIPTION!Iniconf	k,key	/keys/
!_TAG_KIND_DESCRIPTION!Iniconf	s,section	/sections/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PARSER_VERSION!CSS	0.0	/current.age/
!_TAG_PARSER_VERSION!HTML	0.0	/current.age/
!_TAG_PARSER_VERSION!Iniconf	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/nfs/homes/ulayus/0cursus/webserv/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	//
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!HTML!class	attribute	/assigned as attributes/
!_TAG_ROLE_DESCRIPTION!HTML!script	extFile	/referenced as external files/
!_TAG_ROLE_DESCRIPTION!HTML!stylesheet	extFile	/referenced as external files/
BUFFER_SIZE	server/include.hpp	/^#define BUFFER_SIZE /;"	d
HOME	server/index.html	/^	<h1>HOME<\/h1>$/;"	h
HOME	server/index2.html	/^	<h1>HOME<\/h1>$/;"	h
HTML	server/include.hpp	/^#define HTML /;"	d
IMG	server/include.hpp	/^#define IMG /;"	d
INCLUDE_HPP	server/include.hpp	/^#define INCLUDE_HPP$/;"	d
IP	server/include.hpp	/^#define IP /;"	d
PARSING_HPP	parsing/parsing.hpp	/^#define PARSING_HPP$/;"	d
PORT	server/include.hpp	/^#define PORT /;"	d
ParsingError	parsing/utils.cpp	/^const std::string ParsingError(std::string error) throw()$/;"	f	typeref:typename:const std::string
SERVER_HPP_	server/Server.hpp	/^#define SERVER_HPP_$/;"	d
Server	server/Server.cpp	/^Server::Server(const Server& other){$/;"	f	class:Server
Server	server/Server.cpp	/^Server::Server(std::string ipAddr, int port): _buffer(new char[BUFFER_SIZE]) {$/;"	f	class:Server
Server	server/Server.hpp	/^class Server {$/;"	c
WHITESPACE	parsing/utils.cpp	/^#define WHITESPACE /;"	d	file:
_buffer	server/Server.hpp	/^		const char* _buffer;$/;"	m	class:Server	typeref:typename:const char *
_clientfd	server/Server.hpp	/^		int	_clientfd;$/;"	m	class:Server	typeref:typename:int
_ipAddr	server/Server.hpp	/^		std::string _ipAddr;$/;"	m	class:Server	typeref:typename:std::string
_port	server/Server.hpp	/^		int _port;$/;"	m	class:Server	typeref:typename:int
_requestHeader	server/Server.hpp	/^		std::map<std::string, std::string> _requestHeader;$/;"	m	class:Server	typeref:typename:std::map<std::string,std::string>
_sockAddr	server/Server.hpp	/^		sockaddr_in _sockAddr;$/;"	m	class:Server	typeref:typename:sockaddr_in
_sockAddr_len	server/Server.hpp	/^		socklen_t _sockAddr_len;$/;"	m	class:Server	typeref:typename:socklen_t
_sockfd	server/Server.hpp	/^		int _sockfd;$/;"	m	class:Server	typeref:typename:int
acceptRequest	server/Server.cpp	/^void Server::acceptRequest(void) {$/;"	f	class:Server	typeref:typename:void
acceptUploadedFile	parsing/parsing.hpp	/^	bool		acceptUploadedFile;$/;"	m	struct:location	typeref:typename:bool
address	parsing/parsing.hpp	/^	std::string 			address; \/\/address = host:port$/;"	m	struct:server	typeref:typename:std::string
bindPort	server/Server.cpp	/^void Server::bindPort(void) {$/;"	f	class:Server	typeref:typename:void
body	server/style.css	/^body {$/;"	s
checkValueParsing	server/main.cpp	/^void checkValueParsing(std::vector<t_server> servers)$/;"	f	typeref:typename:void
createServerSocket	server/Server.cpp	/^void Server::createServerSocket(void) {$/;"	f	class:Server	typeref:typename:void
demo	server/index.html	/^	<p id="demo">Hello from your Server :)<\/p>$/;"	I
demo	server/index2.html	/^	<p id="demo">Hello from your Server :)<\/p>$/;"	I
directoryListing	parsing/parsing.hpp	/^	bool		directoryListing;$/;"	m	struct:location	typeref:typename:bool
errpage	parsing/parsing.hpp	/^	std::string 			errpage;$/;"	m	struct:server	typeref:typename:std::string
exitWithError	server/Server.cpp	/^void Server::exitWithError(const std::string& errorMessage) {$/;"	f	class:Server	typeref:typename:void
getToken	server/request.cpp	/^static std::string getToken(const std::string& str, char sep, int pos){$/;"	f	typeref:typename:std::string	file:
index	parsing/parsing.hpp	/^	std::string	index;$/;"	m	struct:location	typeref:typename:std::string
initializeLocation	parsing/initializeStruct.cpp	/^void	initializeLocation(t_location & location)$/;"	f	typeref:typename:void
initializeServer	parsing/initializeStruct.cpp	/^void	initializeServer(t_server & server)$/;"	f	typeref:typename:void
intToString	parsing/utils.cpp	/^const std::string intToString(const int number)$/;"	f	typeref:typename:const std::string
isDefaultServer	parsing/parsing.hpp	/^	bool					isDefaultServer;$/;"	m	struct:server	typeref:typename:bool
isDigit	parsing/utils.cpp	/^bool isDigit(const std::string string)$/;"	f	typeref:typename:bool
isValidPath	parsing/utils.cpp	/^bool isValidPath(const std::string string)$/;"	f	typeref:typename:bool
listenForRequest	server/Server.cpp	/^void Server::listenForRequest(void) {$/;"	f	class:Server	typeref:typename:void
location	parsing/parsing.hpp	/^typedef struct location {$/;"	s
locationPath	parsing/parsing.hpp	/^	std::string	locationPath;$/;"	m	struct:location	typeref:typename:std::string
locations	parsing/parsing.hpp	/^	std::vector<t_location>	locations;$/;"	m	struct:server	typeref:typename:std::vector<t_location>
main	server/main.cpp	/^int	main(int ac, char **av)$/;"	f	typeref:typename:int
maxFileSizeUpload	parsing/parsing.hpp	/^	int						maxFileSizeUpload;$/;"	m	struct:server	typeref:typename:int
methodsAllowed	parsing/parsing.hpp	/^	bool 		methodsAllowed[3];$/;"	m	struct:location	typeref:typename:bool[3]
operator =	server/Server.cpp	/^Server&	Server::operator=(const Server &other){$/;"	f	class:Server	typeref:typename:Server &
parseConfFile	parsing/parseConfFile.cpp	/^const std::vector<t_server> parseConfFile(const std::string path)$/;"	f	typeref:typename:const std::vector<t_server>
parseLineLocationBlock	parsing/parseLine.cpp	/^void	parseLineLocationBlock(std::string & line, int nbLine, t_location & location)$/;"	f	typeref:typename:void
parseLineMethodBlock	parsing/parseLine.cpp	/^void	parseLineMethodBlock(std::string & line, int nbLine, t_location & location)$/;"	f	typeref:typename:void
parseLineServerBlock	parsing/parseLine.cpp	/^void	parseLineServerBlock(std::string & line, int nbLine, t_server & server)$/;"	f	typeref:typename:void
parseRequest	server/request.cpp	/^static void parseRequest(std::string request, std::map<std::string, std::string> _requestHeader)/;"	f	typeref:typename:void	file:
processLine	server/request.cpp	/^static void processLine(std::string line, std::map<std::string, std::string>& _requestHeader, in/;"	f	typeref:typename:void	file:
readConfFile	parsing/parseConfFile.cpp	/^const std::vector<t_server> readConfFile(std::ifstream & conf_file)$/;"	f	typeref:typename:const std::vector<t_server>
readRequest	server/request.cpp	/^void Server::readRequest(void) {$/;"	f	class:Server	typeref:typename:void
redirectionCode	parsing/parsing.hpp	/^	int			redirectionCode;$/;"	m	struct:location	typeref:typename:int
redirectionPath	parsing/parsing.hpp	/^	std::string	redirectionPath;$/;"	m	struct:location	typeref:typename:std::string
respondToRequest	server/Server.cpp	/^void Server::respondToRequest(void) {$/;"	f	class:Server	typeref:typename:void
root	parsing/parsing.hpp	/^	std::string	root;$/;"	m	struct:location	typeref:typename:std::string
server	parsing/parsing.hpp	/^typedef struct server {$/;"	s
server_name	parsing/parsing.hpp	/^	std::string 			server_name;$/;"	m	struct:server	typeref:typename:std::string
splitString	parsing/utils.cpp	/^const std::vector<std::string> splitString(const std::string string, const char delimiter)$/;"	f	typeref:typename:const std::vector<std::string>
t_location	parsing/parsing.hpp	/^} t_location;$/;"	t	typeref:struct:location
t_server	parsing/parsing.hpp	/^} t_server;$/;"	t	typeref:struct:server
trimString	parsing/utils.cpp	/^void	trimString(std::string & string)$/;"	f	typeref:typename:void
uploadedFilePath	parsing/parsing.hpp	/^	std::string	uploadedFilePath;$/;"	m	struct:location	typeref:typename:std::string
~Server	server/Server.cpp	/^Server::~Server(void){$/;"	f	class:Server
